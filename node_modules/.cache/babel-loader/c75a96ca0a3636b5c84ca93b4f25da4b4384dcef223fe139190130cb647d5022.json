{"ast":null,"code":"import axios from 'axios';\nconst STRAVA_BASE_URL = 'https://www.strava.com/api/v3';\nconst CLIENT_ID = process.env.REACT_APP_STRAVA_CLIENT_ID;\nconst CLIENT_SECRET = process.env.REACT_APP_STRAVA_CLIENT_SECRET;\nconst REDIRECT_URI = process.env.REACT_APP_STRAVA_REDIRECT_URI;\nclass StravaService {\n  constructor() {\n    this.accessToken = localStorage.getItem('strava_access_token');\n    this.refreshToken = localStorage.getItem('strava_refresh_token');\n  }\n\n  // Generate authorization URL\n  getAuthUrl() {\n    const scope = 'read,activity:read_all,profile:read_all';\n    return `https://www.strava.com/oauth/authorize?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=code&scope=${scope}`;\n  }\n\n  // Exchange authorization code for tokens\n  async exchangeToken(code) {\n    try {\n      const response = await axios.post('https://www.strava.com/oauth/token', {\n        client_id: CLIENT_ID,\n        client_secret: CLIENT_SECRET,\n        code: code,\n        grant_type: 'authorization_code'\n      });\n      const {\n        access_token,\n        refresh_token,\n        athlete\n      } = response.data;\n      localStorage.setItem('strava_access_token', access_token);\n      localStorage.setItem('strava_refresh_token', refresh_token);\n      localStorage.setItem('strava_athlete', JSON.stringify(athlete));\n      this.accessToken = access_token;\n      this.refreshToken = refresh_token;\n      return {\n        access_token,\n        refresh_token,\n        athlete\n      };\n    } catch (error) {\n      console.error('Error exchanging token:', error);\n      throw error;\n    }\n  }\n\n  // Get authenticated athlete\n  async getAthlete() {\n    return this.makeRequest('/athlete');\n  }\n\n  // Get recent activities\n  async getActivities(page = 1, perPage = 30) {\n    return this.makeRequest(`/athlete/activities?page=${page}&per_page=${perPage}`);\n  }\n\n  // Get specific activity\n  async getActivity(id) {\n    return this.makeRequest(`/activities/${id}`);\n  }\n\n  // Get athlete stats\n  async getAthleteStats(athleteId) {\n    return this.makeRequest(`/athletes/${athleteId}/stats`);\n  }\n\n  // Generic request handler\n  async makeRequest(endpoint) {\n    if (!this.accessToken) {\n      throw new Error('No access token available');\n    }\n    try {\n      const response = await axios.get(`${STRAVA_BASE_URL}${endpoint}`, {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        // Token expired, try refresh\n        await this.refreshTokens();\n        // Retry request\n        const response = await axios.get(`${STRAVA_BASE_URL}${endpoint}`, {\n          headers: {\n            'Authorization': `Bearer ${this.accessToken}`\n          }\n        });\n        return response.data;\n      }\n      throw error;\n    }\n  }\n\n  // Refresh expired tokens\n  async refreshTokens() {\n    if (!this.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n    try {\n      const response = await axios.post('https://www.strava.com/oauth/token', {\n        client_id: CLIENT_ID,\n        client_secret: CLIENT_SECRET,\n        grant_type: 'refresh_token',\n        refresh_token: this.refreshToken\n      });\n      const {\n        access_token,\n        refresh_token\n      } = response.data;\n      localStorage.setItem('strava_access_token', access_token);\n      localStorage.setItem('strava_refresh_token', refresh_token);\n      this.accessToken = access_token;\n      this.refreshToken = refresh_token;\n      return access_token;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      // Clear invalid tokens\n      localStorage.removeItem('strava_access_token');\n      localStorage.removeItem('strava_refresh_token');\n      localStorage.removeItem('strava_athlete');\n      throw error;\n    }\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.accessToken;\n  }\n\n  // Logout\n  logout() {\n    localStorage.removeItem('strava_access_token');\n    localStorage.removeItem('strava_refresh_token');\n    localStorage.removeItem('strava_athlete');\n    this.accessToken = null;\n    this.refreshToken = null;\n  }\n}\n\n// Create instance and export it\nconst stravaServiceInstance = new StravaService();\nexport default stravaServiceInstance;","map":{"version":3,"names":["axios","STRAVA_BASE_URL","CLIENT_ID","process","env","REACT_APP_STRAVA_CLIENT_ID","CLIENT_SECRET","REACT_APP_STRAVA_CLIENT_SECRET","REDIRECT_URI","REACT_APP_STRAVA_REDIRECT_URI","StravaService","constructor","accessToken","localStorage","getItem","refreshToken","getAuthUrl","scope","exchangeToken","code","response","post","client_id","client_secret","grant_type","access_token","refresh_token","athlete","data","setItem","JSON","stringify","error","console","getAthlete","makeRequest","getActivities","page","perPage","getActivity","id","getAthleteStats","athleteId","endpoint","Error","get","headers","_error$response","status","refreshTokens","removeItem","isAuthenticated","logout","stravaServiceInstance"],"sources":["/Users/scottyd/Code/trainfuel_cleaned/src/services/stravaService.js"],"sourcesContent":["import axios from 'axios';\n\nconst STRAVA_BASE_URL = 'https://www.strava.com/api/v3';\nconst CLIENT_ID = process.env.REACT_APP_STRAVA_CLIENT_ID;\nconst CLIENT_SECRET = process.env.REACT_APP_STRAVA_CLIENT_SECRET;\nconst REDIRECT_URI = process.env.REACT_APP_STRAVA_REDIRECT_URI;\n\nclass StravaService {\n  constructor() {\n    this.accessToken = localStorage.getItem('strava_access_token');\n    this.refreshToken = localStorage.getItem('strava_refresh_token');\n  }\n\n  // Generate authorization URL\n  getAuthUrl() {\n    const scope = 'read,activity:read_all,profile:read_all';\n    return `https://www.strava.com/oauth/authorize?client_id=${CLIENT_ID}&redirect_uri=${REDIRECT_URI}&response_type=code&scope=${scope}`;\n  }\n\n  // Exchange authorization code for tokens\n  async exchangeToken(code) {\n    try {\n      const response = await axios.post('https://www.strava.com/oauth/token', {\n        client_id: CLIENT_ID,\n        client_secret: CLIENT_SECRET,\n        code: code,\n        grant_type: 'authorization_code'\n      });\n\n      const { access_token, refresh_token, athlete } = response.data;\n      \n      localStorage.setItem('strava_access_token', access_token);\n      localStorage.setItem('strava_refresh_token', refresh_token);\n      localStorage.setItem('strava_athlete', JSON.stringify(athlete));\n      \n      this.accessToken = access_token;\n      this.refreshToken = refresh_token;\n      \n      return { access_token, refresh_token, athlete };\n    } catch (error) {\n      console.error('Error exchanging token:', error);\n      throw error;\n    }\n  }\n\n  // Get authenticated athlete\n  async getAthlete() {\n    return this.makeRequest('/athlete');\n  }\n\n  // Get recent activities\n  async getActivities(page = 1, perPage = 30) {\n    return this.makeRequest(`/athlete/activities?page=${page}&per_page=${perPage}`);\n  }\n\n  // Get specific activity\n  async getActivity(id) {\n    return this.makeRequest(`/activities/${id}`);\n  }\n\n  // Get athlete stats\n  async getAthleteStats(athleteId) {\n    return this.makeRequest(`/athletes/${athleteId}/stats`);\n  }\n\n  // Generic request handler\n  async makeRequest(endpoint) {\n    if (!this.accessToken) {\n      throw new Error('No access token available');\n    }\n\n    try {\n      const response = await axios.get(`${STRAVA_BASE_URL}${endpoint}`, {\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      if (error.response?.status === 401) {\n        // Token expired, try refresh\n        await this.refreshTokens();\n        // Retry request\n        const response = await axios.get(`${STRAVA_BASE_URL}${endpoint}`, {\n          headers: {\n            'Authorization': `Bearer ${this.accessToken}`\n          }\n        });\n        return response.data;\n      }\n      throw error;\n    }\n  }\n\n  // Refresh expired tokens\n  async refreshTokens() {\n    if (!this.refreshToken) {\n      throw new Error('No refresh token available');\n    }\n\n    try {\n      const response = await axios.post('https://www.strava.com/oauth/token', {\n        client_id: CLIENT_ID,\n        client_secret: CLIENT_SECRET,\n        grant_type: 'refresh_token',\n        refresh_token: this.refreshToken\n      });\n\n      const { access_token, refresh_token } = response.data;\n      \n      localStorage.setItem('strava_access_token', access_token);\n      localStorage.setItem('strava_refresh_token', refresh_token);\n      \n      this.accessToken = access_token;\n      this.refreshToken = refresh_token;\n      \n      return access_token;\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      // Clear invalid tokens\n      localStorage.removeItem('strava_access_token');\n      localStorage.removeItem('strava_refresh_token');\n      localStorage.removeItem('strava_athlete');\n      throw error;\n    }\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    return !!this.accessToken;\n  }\n\n  // Logout\n  logout() {\n    localStorage.removeItem('strava_access_token');\n    localStorage.removeItem('strava_refresh_token');\n    localStorage.removeItem('strava_athlete');\n    this.accessToken = null;\n    this.refreshToken = null;\n  }\n}\n\n// Create instance and export it\nconst stravaServiceInstance = new StravaService();\nexport default stravaServiceInstance;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}