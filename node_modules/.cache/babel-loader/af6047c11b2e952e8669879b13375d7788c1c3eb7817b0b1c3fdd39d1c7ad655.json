{"ast":null,"code":"// Convert Strava activities to our training data format\nexport const processStravaActivities = activities => {\n  const processedActivities = activities.map(activity => ({\n    id: activity.id,\n    date: activity.start_date.split('T')[0],\n    type: mapActivityType(activity.type, activity.name),\n    duration: Math.round(activity.moving_time / 60),\n    // Convert to minutes\n    intensity: calculateIntensity(activity),\n    distance: activity.distance,\n    elevationGain: activity.total_elevation_gain,\n    averageHeartRate: activity.average_heartrate,\n    maxHeartRate: activity.max_heartrate,\n    averagePower: activity.average_watts,\n    maxPower: activity.max_watts,\n    tss: calculateTSS(activity),\n    calories: activity.calories || estimateCalories(activity)\n  }));\n  return processedActivities;\n};\n\n// Map Strava activity types to our categories\nconst mapActivityType = (stravaType, name) => {\n  const typeMapping = {\n    'Ride': 'Cycling',\n    'VirtualRide': 'Indoor Cycling',\n    'Run': 'Running',\n    'Swim': 'Swimming',\n    'WeightTraining': 'Strength Training',\n    'Yoga': 'Recovery',\n    'Walk': 'Recovery Walk'\n  };\n\n  // Check for specific workout types in the name\n  if (name.toLowerCase().includes('interval')) return 'Interval Training';\n  if (name.toLowerCase().includes('recovery')) return 'Recovery Ride';\n  if (name.toLowerCase().includes('tempo')) return 'Tempo';\n  if (name.toLowerCase().includes('endurance')) return 'Endurance';\n  return typeMapping[stravaType] || stravaType;\n};\n\n// Calculate training intensity based on heart rate zones\nconst calculateIntensity = activity => {\n  if (!activity.average_heartrate) return 'Unknown';\n\n  // These should be personalized based on user's HR zones\n  const maxHR = 190; // Should come from user profile\n  const hrZones = {\n    zone1: maxHR * 0.6,\n    zone2: maxHR * 0.7,\n    zone3: maxHR * 0.8,\n    zone4: maxHR * 0.9\n  };\n  const avgHR = activity.average_heartrate;\n  if (avgHR < hrZones.zone1) return 'Very Low';\n  if (avgHR < hrZones.zone2) return 'Low';\n  if (avgHR < hrZones.zone3) return 'Moderate';\n  if (avgHR < hrZones.zone4) return 'High';\n  return 'Very High';\n};\n\n// Calculate Training Stress Score (TSS)\nconst calculateTSS = activity => {\n  // Simplified TSS calculation\n  // Real TSS requires FTP (Functional Threshold Power)\n  const duration = activity.moving_time / 3600; // hours\n  const avgPower = activity.average_watts;\n  const ftp = 250; // Should come from user profile\n\n  if (avgPower && ftp) {\n    const intensity = avgPower / ftp;\n    return Math.round(duration * intensity * intensity * 100);\n  }\n\n  // Fallback: estimate based on heart rate and duration\n  const intensityFactor = calculateIntensityFactor(activity);\n  return Math.round(duration * intensityFactor * 100);\n};\nconst calculateIntensityFactor = activity => {\n  const intensity = calculateIntensity(activity);\n  const factors = {\n    'Very Low': 0.3,\n    'Low': 0.5,\n    'Moderate': 0.7,\n    'High': 0.85,\n    'Very High': 1.0\n  };\n  return factors[intensity] || 0.6;\n};\n\n// Estimate calories if not provided\nconst estimateCalories = activity => {\n  const duration = activity.moving_time / 3600; // hours\n  const type = activity.type;\n\n  // Rough estimates per hour by activity type\n  const caloriesPerHour = {\n    'Ride': 600,\n    'VirtualRide': 650,\n    'Run': 700,\n    'Swim': 500,\n    'WeightTraining': 400\n  };\n  return Math.round(duration * (caloriesPerHour[type] || 500));\n};\n\n// Calculate weekly training load\nexport const calculateWeeklyTSS = activities => {\n  const oneWeekAgo = new Date();\n  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n  const recentActivities = activities.filter(activity => new Date(activity.date) >= oneWeekAgo);\n  return recentActivities.reduce((total, activity) => total + activity.tss, 0);\n};\n\n// Analyze training phase based on recent activities\nexport const analyzeTrainingPhase = activities => {\n  const recentActivities = activities.slice(0, 10); // Last 10 activities\n  const avgIntensityScore = recentActivities.reduce((sum, activity) => {\n    const intensityScores = {\n      'Very Low': 1,\n      'Low': 2,\n      'Moderate': 3,\n      'High': 4,\n      'Very High': 5\n    };\n    return sum + (intensityScores[activity.intensity] || 3);\n  }, 0) / recentActivities.length;\n  const weeklyTSS = calculateWeeklyTSS(activities);\n  if (weeklyTSS > 600 && avgIntensityScore > 3.5) return 'Peak';\n  if (weeklyTSS > 400 && avgIntensityScore > 3) return 'Build';\n  if (weeklyTSS > 200) return 'Base';\n  return 'Recovery';\n};","map":{"version":3,"names":["processStravaActivities","activities","processedActivities","map","activity","id","date","start_date","split","type","mapActivityType","name","duration","Math","round","moving_time","intensity","calculateIntensity","distance","elevationGain","total_elevation_gain","averageHeartRate","average_heartrate","maxHeartRate","max_heartrate","averagePower","average_watts","maxPower","max_watts","tss","calculateTSS","calories","estimateCalories","stravaType","typeMapping","toLowerCase","includes","maxHR","hrZones","zone1","zone2","zone3","zone4","avgHR","avgPower","ftp","intensityFactor","calculateIntensityFactor","factors","caloriesPerHour","calculateWeeklyTSS","oneWeekAgo","Date","setDate","getDate","recentActivities","filter","reduce","total","analyzeTrainingPhase","slice","avgIntensityScore","sum","intensityScores","length","weeklyTSS"],"sources":["/Users/scottyd/Code/trainfuel_cleaned/src/utils/trainingUtils.js"],"sourcesContent":["// Convert Strava activities to our training data format\nexport const processStravaActivities = (activities) => {\n  const processedActivities = activities.map(activity => ({\n    id: activity.id,\n    date: activity.start_date.split('T')[0],\n    type: mapActivityType(activity.type, activity.name),\n    duration: Math.round(activity.moving_time / 60), // Convert to minutes\n    intensity: calculateIntensity(activity),\n    distance: activity.distance,\n    elevationGain: activity.total_elevation_gain,\n    averageHeartRate: activity.average_heartrate,\n    maxHeartRate: activity.max_heartrate,\n    averagePower: activity.average_watts,\n    maxPower: activity.max_watts,\n    tss: calculateTSS(activity),\n    calories: activity.calories || estimateCalories(activity)\n  }));\n\n  return processedActivities;\n};\n\n// Map Strava activity types to our categories\nconst mapActivityType = (stravaType, name) => {\n  const typeMapping = {\n    'Ride': 'Cycling',\n    'VirtualRide': 'Indoor Cycling',\n    'Run': 'Running',\n    'Swim': 'Swimming',\n    'WeightTraining': 'Strength Training',\n    'Yoga': 'Recovery',\n    'Walk': 'Recovery Walk'\n  };\n\n  // Check for specific workout types in the name\n  if (name.toLowerCase().includes('interval')) return 'Interval Training';\n  if (name.toLowerCase().includes('recovery')) return 'Recovery Ride';\n  if (name.toLowerCase().includes('tempo')) return 'Tempo';\n  if (name.toLowerCase().includes('endurance')) return 'Endurance';\n\n  return typeMapping[stravaType] || stravaType;\n};\n\n// Calculate training intensity based on heart rate zones\nconst calculateIntensity = (activity) => {\n  if (!activity.average_heartrate) return 'Unknown';\n  \n  // These should be personalized based on user's HR zones\n  const maxHR = 190; // Should come from user profile\n  const hrZones = {\n    zone1: maxHR * 0.6,\n    zone2: maxHR * 0.7,\n    zone3: maxHR * 0.8,\n    zone4: maxHR * 0.9\n  };\n\n  const avgHR = activity.average_heartrate;\n  \n  if (avgHR < hrZones.zone1) return 'Very Low';\n  if (avgHR < hrZones.zone2) return 'Low';\n  if (avgHR < hrZones.zone3) return 'Moderate';\n  if (avgHR < hrZones.zone4) return 'High';\n  return 'Very High';\n};\n\n// Calculate Training Stress Score (TSS)\nconst calculateTSS = (activity) => {\n  // Simplified TSS calculation\n  // Real TSS requires FTP (Functional Threshold Power)\n  const duration = activity.moving_time / 3600; // hours\n  const avgPower = activity.average_watts;\n  const ftp = 250; // Should come from user profile\n\n  if (avgPower && ftp) {\n    const intensity = avgPower / ftp;\n    return Math.round(duration * intensity * intensity * 100);\n  }\n\n  // Fallback: estimate based on heart rate and duration\n  const intensityFactor = calculateIntensityFactor(activity);\n  return Math.round(duration * intensityFactor * 100);\n};\n\nconst calculateIntensityFactor = (activity) => {\n  const intensity = calculateIntensity(activity);\n  const factors = {\n    'Very Low': 0.3,\n    'Low': 0.5,\n    'Moderate': 0.7,\n    'High': 0.85,\n    'Very High': 1.0\n  };\n  return factors[intensity] || 0.6;\n};\n\n// Estimate calories if not provided\nconst estimateCalories = (activity) => {\n  const duration = activity.moving_time / 3600; // hours\n  const type = activity.type;\n  \n  // Rough estimates per hour by activity type\n  const caloriesPerHour = {\n    'Ride': 600,\n    'VirtualRide': 650,\n    'Run': 700,\n    'Swim': 500,\n    'WeightTraining': 400\n  };\n\n  return Math.round(duration * (caloriesPerHour[type] || 500));\n};\n\n// Calculate weekly training load\nexport const calculateWeeklyTSS = (activities) => {\n  const oneWeekAgo = new Date();\n  oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);\n\n  const recentActivities = activities.filter(activity => \n    new Date(activity.date) >= oneWeekAgo\n  );\n\n  return recentActivities.reduce((total, activity) => total + activity.tss, 0);\n};\n\n// Analyze training phase based on recent activities\nexport const analyzeTrainingPhase = (activities) => {\n  const recentActivities = activities.slice(0, 10); // Last 10 activities\n  const avgIntensityScore = recentActivities.reduce((sum, activity) => {\n    const intensityScores = {\n      'Very Low': 1,\n      'Low': 2,\n      'Moderate': 3,\n      'High': 4,\n      'Very High': 5\n    };\n    return sum + (intensityScores[activity.intensity] || 3);\n  }, 0) / recentActivities.length;\n\n  const weeklyTSS = calculateWeeklyTSS(activities);\n\n  if (weeklyTSS > 600 && avgIntensityScore > 3.5) return 'Peak';\n  if (weeklyTSS > 400 && avgIntensityScore > 3) return 'Build';\n  if (weeklyTSS > 200) return 'Base';\n  return 'Recovery';\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}