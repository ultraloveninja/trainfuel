{"ast":null,"code":"// Helper pure functions for workout logic\nexport const determineWorkoutType = (activities = [], seasonType = 'in-season') => {\n  const daysSinceHard = activities.findIndex(a => a.intensity === 'High' || a.intensity === 'Very High');\n  if (daysSinceHard >= 2 || activities.length === 0) {\n    return seasonType === 'in-season' ? 'Quality Session' : 'Interval Training';\n  } else if (daysSinceHard === 1) {\n    return 'Active Recovery';\n  } else {\n    return 'Base Endurance';\n  }\n};\nexport const getPrimaryFocus = (upcomingEvents = []) => {\n  if (upcomingEvents.length > 0) {\n    const nextEvent = upcomingEvents[0];\n    if (nextEvent.weeksOut <= 2) return 'Race Prep';\n    if (nextEvent.weeksOut <= 8) return 'Build Phase';\n  }\n  return 'General Fitness';\n};\nexport const getMainWorkout = (activities = [], seasonType = 'in-season', upcomingEvents = []) => {\n  const workoutType = determineWorkoutType(activities, seasonType);\n  const focus = getPrimaryFocus(upcomingEvents);\n  if (workoutType === 'Quality Session') {\n    if (focus === 'Race Prep') {\n      return \"3x8min at race pace with 3min recovery\";\n    }\n    return \"4x5min at threshold with 2:30 recovery\";\n  } else if (workoutType === 'Active Recovery') {\n    return \"30-45min easy with 5x30sec form drills\";\n  }\n  return \"60-90min aerobic base with negative split final 20min\";\n};\nexport const calculateTargetRPE = (activities = [], seasonType = 'in-season') => {\n  const workoutType = determineWorkoutType(activities, seasonType);\n  if (workoutType === 'Quality Session') return '7-8/10';\n  if (workoutType === 'Active Recovery') return '3-4/10';\n  return '5-6/10';\n};\nexport const getWorkoutRationale = (activities = [], upcomingEvents = [], trainingData = {}) => {\n  const daysSinceHard = activities.findIndex(a => a.intensity === 'High' || a.intensity === 'Very High');\n  const upcomingRace = upcomingEvents.length > 0 ? upcomingEvents[0] : null;\n  if (upcomingRace && upcomingRace.weeksOut <= 12) {\n    var _upcomingRace$details;\n    let buildPhase = \"\";\n    if (upcomingRace.weeksOut <= 3) {\n      buildPhase = \" Taper phase - maintain intensity while reducing volume.\";\n    } else if ((_upcomingRace$details = upcomingRace.details) !== null && _upcomingRace$details !== void 0 && _upcomingRace$details.distance) {\n      buildPhase = ` Build towards ${upcomingRace.details.distance} race distance with progressive overload.`;\n    }\n    return `Building towards ${upcomingRace.name} in ${upcomingRace.weeksOut} weeks.${buildPhase} Focus on event-specific fitness.`;\n  } else if (daysSinceHard >= 3 || activities.length === 0) {\n    return activities.length === 0 ? \"No recent activity data available. Starting with quality work to build fitness foundation.\" : `You haven't had a hard session in ${daysSinceHard} days. Time for some quality work to maintain/build fitness.`;\n  } else if (daysSinceHard === 1) {\n    var _activities$;\n    return `Yesterday was a hard effort (TSS: ${((_activities$ = activities[0]) === null || _activities$ === void 0 ? void 0 : _activities$.tss) || 'unknown'}). Today should focus on active recovery to promote adaptation.`;\n  } else {\n    return `Based on your recent training load (Weekly TSS: ${(trainingData === null || trainingData === void 0 ? void 0 : trainingData.weeklyTSS) || 'calculating...'}), continuing aerobic development while managing fatigue.`;\n  }\n};","map":{"version":3,"names":["determineWorkoutType","activities","seasonType","daysSinceHard","findIndex","a","intensity","length","getPrimaryFocus","upcomingEvents","nextEvent","weeksOut","getMainWorkout","workoutType","focus","calculateTargetRPE","getWorkoutRationale","trainingData","upcomingRace","_upcomingRace$details","buildPhase","details","distance","name","_activities$","tss","weeklyTSS"],"sources":["/Users/scottyd/Code/trainfuel_cleaned/src/utils/workoutUtils.js"],"sourcesContent":["// Helper pure functions for workout logic\nexport const determineWorkoutType = (activities = [], seasonType = 'in-season') => {\n  const daysSinceHard = activities.findIndex(a => a.intensity === 'High' || a.intensity === 'Very High');\n\n  if (daysSinceHard >= 2 || activities.length === 0) {\n    return seasonType === 'in-season' ? 'Quality Session' : 'Interval Training';\n  } else if (daysSinceHard === 1) {\n    return 'Active Recovery';\n  } else {\n    return 'Base Endurance';\n  }\n};\n\nexport const getPrimaryFocus = (upcomingEvents = []) => {\n  if (upcomingEvents.length > 0) {\n    const nextEvent = upcomingEvents[0];\n    if (nextEvent.weeksOut <= 2) return 'Race Prep';\n    if (nextEvent.weeksOut <= 8) return 'Build Phase';\n  }\n  return 'General Fitness';\n};\n\nexport const getMainWorkout = (activities = [], seasonType = 'in-season', upcomingEvents = []) => {\n  const workoutType = determineWorkoutType(activities, seasonType);\n  const focus = getPrimaryFocus(upcomingEvents);\n\n  if (workoutType === 'Quality Session') {\n    if (focus === 'Race Prep') {\n      return \"3x8min at race pace with 3min recovery\";\n    }\n    return \"4x5min at threshold with 2:30 recovery\";\n  } else if (workoutType === 'Active Recovery') {\n    return \"30-45min easy with 5x30sec form drills\";\n  }\n  return \"60-90min aerobic base with negative split final 20min\";\n};\n\nexport const calculateTargetRPE = (activities = [], seasonType = 'in-season') => {\n  const workoutType = determineWorkoutType(activities, seasonType);\n  if (workoutType === 'Quality Session') return '7-8/10';\n  if (workoutType === 'Active Recovery') return '3-4/10';\n  return '5-6/10';\n};\n\nexport const getWorkoutRationale = (activities = [], upcomingEvents = [], trainingData = {}) => {\n  const daysSinceHard = activities.findIndex(a => a.intensity === 'High' || a.intensity === 'Very High');\n  const upcomingRace = upcomingEvents.length > 0 ? upcomingEvents[0] : null;\n\n  if (upcomingRace && upcomingRace.weeksOut <= 12) {\n    let buildPhase = \"\";\n    if (upcomingRace.weeksOut <= 3) {\n      buildPhase = \" Taper phase - maintain intensity while reducing volume.\";\n    } else if (upcomingRace.details?.distance) {\n      buildPhase = ` Build towards ${upcomingRace.details.distance} race distance with progressive overload.`;\n    }\n\n    return `Building towards ${upcomingRace.name} in ${upcomingRace.weeksOut} weeks.${buildPhase} Focus on event-specific fitness.`;\n\n  } else if (daysSinceHard >= 3 || activities.length === 0) {\n    return activities.length === 0 \n      ? \"No recent activity data available. Starting with quality work to build fitness foundation.\"\n      : `You haven't had a hard session in ${daysSinceHard} days. Time for some quality work to maintain/build fitness.`;\n  } else if (daysSinceHard === 1) {\n    return `Yesterday was a hard effort (TSS: ${activities[0]?.tss || 'unknown'}). Today should focus on active recovery to promote adaptation.`;\n  } else {\n    return `Based on your recent training load (Weekly TSS: ${trainingData?.weeklyTSS || 'calculating...'}), continuing aerobic development while managing fatigue.`;\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}